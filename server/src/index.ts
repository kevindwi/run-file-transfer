import express from "express";
import { createServer } from "http";
import { Server, Socket } from "socket.io";
import path from "path";
import cors from "cors";
import { generateRoomId } from "./utils/id-generator";

import "./types";

const app = express();
const server = createServer(app);

// Configure CORS
app.use(
  cors({
    origin: process.env.CLIENT_URL || "http://localhost:5173",
    credentials: true,
  }),
);

// Serve static files (for production)
if (process.env.NODE_ENV === "production") {
  app.use(express.static(path.join(__dirname, "../../client/dist")));

  app.get("*", (req, res) => {
    res.sendFile(path.join(__dirname, "../../client/dist/index.html"));
  });
}

app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
  });
});

const io = new Server<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>(server, {
  cors: {
    origin:
      process.env.CLIENT_URL ||
      "http://localhost:5173" ||
      "http://192.168.1.5:5173",
    methods: ["GET", "POST"],
  },
  connectionStateRecovery: {
    maxDisconnectionDuration: 2 * 60 * 1000, // 2 minutes
    skipMiddlewares: true,
  },
});

io.on("connection", (socket: Socket) => {
  console.log("A user connected:", socket.id);

  socket.on("register", (message: string) => {
    console.log("Message received from client:", message);
    io.emit("message", `Server received: ${message}`);
  });

  socket.on("create-room", (callback) => {
    const roomId = generateRoomId();
    socket.join(roomId);
    callback(roomId);
    console.log(`Room ${roomId} generated by ${socket.id}`);
    // io.emit("message", `Server received: ${room}`);
  });

  socket.on("join-room", (roomId: string, callback) => {
    const room = io.sockets.adapter.rooms.get(roomId);

    if (!room) {
      return callback({ success: false, error: "Room tidak ditemukan." });
    }

    if (room.size >= 2) {
      // Batasi 2 user per room
      return callback({ success: false, error: "Room sudah penuh." });
    }

    socket.join(roomId);
    callback({ success: true, roomId });
    io.to(roomId).emit("user-joined", socket.id);
    console.log(`${socket.id} joined room ${roomId}`);
  });

  socket.on("disconnect", () => {
    const rooms = Array.from(socket.rooms);
    rooms.forEach((room) => {
      if (room !== socket.id) {
        // Skip room default (socket.id)
        socket.leave(room);
        io.to(room).emit("user-left", socket.id);
      }
    });
    console.log("User disconnect:", socket.id);
  });
});

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`🚀 Signaling server running on port ${PORT}`);
  console.log(`📡 WebSocket server ready for connections`);
  console.log(`🌍 Environment: ${process.env.NODE_ENV || "development"}`);
});
