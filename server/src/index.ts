import cors from "cors";
import express, { Request, Response } from "express";
import { createServer } from "http";
import path from "path";
import { Server, Socket } from "socket.io";
import { generateRoomId } from "./utils/id-generator.js";

import "./types.js";

const app = express();
const server = createServer(app);

// Configure CORS
app.use(
  cors({
    origin: process.env.CLIENT_URL,
    credentials: true,
  }),
);

// Serve static files (for production)
if (process.env.NODE_ENV === "production") {
  app.use(express.static(path.join(__dirname, "../../client/dist")));

  app.get("*", (_req: Request, res: Response) => {
    res.sendFile(path.join(__dirname, "../../client/dist/index.html"));
  });
}

app.get("/health", (_req: Request, res: Response) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
  });
});

const io = new Server<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>(server, {
  cors: {
    origin: process.env.CLIENT_URL,
    methods: ["GET", "POST"],
  },
  connectionStateRecovery: {
    maxDisconnectionDuration: 2 * 60 * 1000, // 2 minutes
    skipMiddlewares: true,
  },
});

io.on("connection", (socket: Socket) => {
  console.log("A user connected:", socket.id);

  socket.on("disconnect", () => {
    console.log("User disconnect:", socket.id);

    for (const roomId of socket.rooms) {
      if (roomId !== socket.id) {
        io.to(roomId).emit("user-left", socket.id);
      }
    }
  });

  socket.on("register", (message: string) => {
    console.log("Message received from client:", message);
    io.emit("message", `Server received: ${message}`);
  });

  socket.on("create-room", (callback) => {
    const roomId = generateRoomId();
    socket.join(roomId);
    callback(roomId);
    console.log(`Room ${roomId} generated by ${socket.id}`);
  });

  socket.on("join-room", (roomId: string, callback) => {
    const room = io.sockets.adapter.rooms.get(roomId);

    if (!room) {
      return callback({ success: false, error: "Room tidak ditemukan." });
    }

    if (room.size >= 2) {
      return callback({ success: false, error: "Room sudah penuh." });
    }

    socket.join(roomId);
    callback({ success: true, roomId });

    // Hanya kirim ke user yang sudah ada di room (room creator)
    // Jangan kirim ke diri sendiri (joiner)
    socket.to(roomId).emit("user-joined", socket.id, roomId);
    console.log(`${socket.id} joined room ${roomId}, notified existing users`);
  });

  socket.on("offer", (data) => {
    console.log("Relaying offer from:", socket.id, "to room:", data.roomId);

    // Validasi room exists
    if (!io.sockets.adapter.rooms.has(data.roomId)) {
      console.error("Room not found:", data.roomId);
      return;
    }

    // Validasi socket ada di room
    if (!socket.rooms.has(data.roomId)) {
      console.warn(`Socket ${socket.id} not in room ${data.roomId}`);
      return;
    }

    socket.to(data.roomId).emit("offer", {
      sdp: data.sdp,
      from: socket.id,
      roomId: data.roomId,
    });

    console.log("Offer relayed to room:", data.roomId);
  });

  socket.on("answer", (data) => {
    console.log("Relaying answer from:", socket.id, "to room:", data.roomId);

    // Validasi room exists
    if (!io.sockets.adapter.rooms.has(data.roomId)) {
      console.error("Room not found:", data.roomId);
      return;
    }

    if (!socket.rooms.has(data.roomId)) {
      console.warn(`Socket ${socket.id} not in room ${data.roomId}`);
      return;
    }

    socket.to(data.roomId).emit("answer", {
      sdp: data.sdp,
      from: socket.id,
      roomId: data.roomId,
    });

    console.log("Answer relayed to room:", data.roomId);
  });

  socket.on("ice-candidate", (data) => {
    console.log(
      "Relaying ICE candidate from:",
      socket.id,
      "to room:",
      data.roomId,
    );

    // Validasi room exists
    if (!io.sockets.adapter.rooms.has(data.roomId)) {
      console.error("Room not found:", data.roomId);
      return;
    }

    if (!socket.rooms.has(data.roomId)) {
      console.warn(`Socket ${socket.id} not in room ${data.roomId}`);
      return;
    }

    socket.to(data.roomId).emit("ice-candidate", {
      candidate: data.candidate,
      from: socket.id,
      roomId: data.roomId,
    });

    console.log("ICE candidate relayed to room:", data.roomId);
  });
});

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`Signaling server running on port ${PORT}`);
  console.log(`WebSocket server ready for connections`);
  console.log(`Environment: ${process.env.NODE_ENV || "development"}`);
});
